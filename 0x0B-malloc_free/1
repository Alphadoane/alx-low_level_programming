#include <stdlib.h>

/**
 * word_count - Counts the number of words in a string.
 * @str: The string to count words from.
 *
 * Return: The number of words in the string.
 */
int word_count(char *str)
{
int count = 0, i = 0;

while (str[i] != '\0')
{
if (str[i] != ' ' && (i == 0 || str[i - 1] == ' '))
{
count++;
}
i++;
}
return (count);
}

/**
 * strtow - Splits a string into words.
 * @str: The string to split.
 *
 * Return: A pointer to an array of strings (words), or NULL on failure.
 */
char **strtow(char *str)
{
char **words;
int i, j, k, word_len, wc, start;

if (str == NULL || *str == '\0')
return (NULL);

wc = word_count(str);
if (wc == 0)
return (NULL);

/* Allocate memory for the array of words */
words = malloc((wc + 1) * sizeof(char *));
if (words == NULL)
return (NULL);

i = 0, k = 0;
while (str[i] != '\0')
{
/* Skip leading spaces */
while (str[i] == ' ')
i++;

if (str[i] == '\0')
break;

/* Find the length of the next word */
start = i;
while (str[i] != '\0' && str[i] != ' ')
i++;
word_len = i - start;

/* Allocate memory for the word and copy it */
words[k] = malloc((word_len + 1) * sizeof(char));
if (words[k] == NULL)
{
/* Free previously allocated memory on failure */
for (j = 0; j < k; j++)
free(words[j]);
free(words);
return (NULL);
}

for (j = 0; j < word_len; j++)
words[k][j] = str[start + j];
words[k][j] = '\0'; /* Null-terminate the word */
k++;
}

words[k] = NULL; /* Null-terminate the array of words */
return (words);
}
